//mixins ------
//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
  xs: 375px,
  sm: 640px,
  md: 960px,
  lg: 1200px,
  xl: 1600px,
  custom-tablet: 768px
);

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  }

  @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  }

  @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

    // If one or both of the breakpoints don't exist.
  }

  @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower)==false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper)==false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

.headerTitleContainer {
  background-color: #003580;
  position: relative;
}
//mobil

//tab
@include respond-above(md) {
  .headerTitle {
    font-size: 25px;
    text-align: center;
    line-height: normal;
    margin-left:11px;
    
  }
// .headerDesc{
//    margin: -8px 0px 41px 0px;
// }
 
}

.headerDesc {
  margin: 20px 0px;
}

.header {
  background-color: #003580;
  color: white;
  display: flex;
  justify-content: center;
  position: relative;


}
@include respond-above(md){
  .headerTitleContainer{
    padding-top: 50px;
   
  }
  .headerTitle{
    font-size: 35px;
    
  }
}
@include respond-below(md) {
  .headerTitle {
    margin-top: 30px;
    font-size: 18px;
    text-align: center;
    line-height: normal;
    margin-left:11px;
    
  }
  .headerDesc {
    margin-top: 10px;
    font-size: 12px;
    line-height: 20px;
    text-align: center;
  }
 
}
.header-main-background-img {

  position: absolute;
  top: -50px;
  left: 0;
  right: 0;
  width: 100%;
  height: 114%;
  object-fit: cover;


}

.HotelListStyle {
  background-color: #b9bbbd;
}


.headerContainer {
  display: flex;
  justify-content: center;
  text-align: center;
  line-height: 62px;
}

.headerContainer.listMode {
  margin: 20px 0px 0px 0px;
}

.headerList {
  display: flex;
  gap: 40px;
  margin-bottom: 50px;
}

.headerListItem {
  display: flex;
  align-items: center;
  gap: 10px;
}

.headerListItem.active {
  border: 1px solid white;
  padding: 10px;
  border-radius: 20px;
}





.icone {
  -webkit-text-fill-color: #003580;
}



.headerIcon {
  color: lightgray;
}

.headerSearchItem {
  display: flex;
  align-items: center;
  gap: 10px;
}

.headerSearchInput {
  border: none;
  outline: none;
  line-height: normal;
}

.headerSearchText {
  color: lightgray;
  cursor: pointer;
}

.date {
  position: absolute;
  top: 50px;
  z-index: 2;
}

.options {
  z-index: 2;
  position: absolute;
  top: 50px;
  background-color: white;
  color: gray;
  border-radius: 5px;
  -webkit-box-shadow: 0px 0px 10px -5px rgba(0, 0, 0, 0.4);
  box-shadow: 0px 0px 10px -5px rgba(0, 0, 0, 0.4);
}


.optionCounter {
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 12px;
  color: black;
}

.optionCounterButton {
  width: 30px;
  height: 30px;
  border: 1px solid #0071c2;
  color: #0071c2;
  cursor: pointer;
  background-color: white;
}

.optionCounterButton:disabled {
  cursor: not-allowed;
}

.serched-itms-wraper {
  display: flex;
}
.headerSearch {
  height: 50px;
  background-color: white;
  border: 3px solid #febb02;
  display: flex;
  align-items: center;
  justify-content: space-around;
  padding: 10px 0px;
  border-radius: 5px;
  position: absolute;
  bottom: -25px;
  width: 100%;
  max-width: 1024px;
}
@include respond-between(xs,sm){

  .onlylg{
    display: none;
  }
  .rs-navbar-item{
    height: 20px;
  }
}
@include respond-between(md,xl){

  .rs-navbar-item{
    height: 30px;
  }
}
@include respond-between(sm,md){

  .rs-navbar-item{
    height: 20px;
  }
}
@include respond-between(md,lg){

}
